name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - main
    paths:
      - scripts/terraform/**
  workflow_dispatch:   

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
              
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: scripts/terraform
      run: terraform init

    # Terraform format
    - name: Terraform Format  
      run: terraform fmt -check 

    # Generates an execution plan for Terraform 
    - name: Terraform Plan
      working-directory: scripts/terraform
      run: terraform plan

    # Terraform Apply
    - name: Terraform Apply
      working-directory: scripts/terraform
      run: terraform apply -auto-approve

    - name: Install dependencies
      run: |
          sudo apt install gh -y
          sudo apt install jq -y  

    - name: GitHub-Cli login
      run: |
          echo "${{ secrets.TOKEN }}" | gh auth login --with-token

    - name: Set Secrets
      run: |
          acr_name=$(az acr list | jq -r '.[0].loginServer')
          gh secret set CONTAINER_REGISTRY --body "$acr_name"

          az acr credential show --name "$acr_name" --query "{username:username, passwords:passwords[0].value}" --output json > credentials.json
          gh secret set REGISTRY_UN --body "$(cat credentials.json | jq -r '.username')"
          gh secret set REGISTRY_PW --body "$(cat credentials.json | jq -r '.passwords')"

          az aks get-credentials --resource-group ${{ vars.AZURE_RESOURCE_NAME }} --name ${{ vars.APP_NAME }}  
          gh secret set KUBE_CONFIG --body "$(cat ~/.kube/config | base64 -w 0)"
