name: 'Terraform Plan/Apply'

on:
  push:
    branches:
    - main
    paths:
      - scripts/terraform/**
  workflow_dispatch:   

#Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

#These environment variables are used by the terraform azure provider
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"

jobs:
              
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: scripts/terraform
      run: terraform init

    # Terraform format
    - name: Terraform Format  
      run: terraform fmt -check 

    # Generates an execution plan for Terraform 
    - name: Terraform Plan
      working-directory: scripts/terraform
      run: terraform plan

    # Terraform Apply
    - name: Terraform Apply
      working-directory: scripts/terraform
      run: terraform apply -auto-approve

    # Attch Container Registry to AKS cluster
    - name: Attch Container Registry to AKS cluster
      run: az aks update --resource-group booksApp --name booksApp --attach-acr booksApp   

    # Get AKS configs
    - name: Get AKS Kubeconfig
      run: az aks get-credentials --resource-group booksApp --name booksApp --file kubeconfig --overwrite-existing 

    - name: Upload Kubeconfig as Secret
      run: echo "KUBE_CONFIG=$(cat kubeconfig | base64)" >> $GITHUB_ENV

    - name: Set KUBE_CONFIG Secret
      uses: actions/github-script@v6
      with:
        script: |
          const base64KubeConfig = process.env.KUBE_CONFIG;
          await github.actions.createOrUpdateSecretForRepo({
          owner: context.repo.owner,
          repo: context.repo.repo,
          secret_name: 'KUBE_CONFIG',
          encrypted_value: base64KubeConfig
          });
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    

